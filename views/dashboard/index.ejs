<% include ../partials/header %>
    
    <div class="container-fluid">  
        <div id="dash-left-pane" class="col-md-2">
            <div class="row">
                    <!--<span class="glyphicon glyphicon-user"></span>-->
                    <span id="dash-img-span"></span>
            </div>
            <div id="dash-name" class="row">
                <strong><%= user.name %></strong>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <nav id="dash-left-menu">
                      <UL>
                       <li class="var_nav">
                          <div class="link_bg"></div>
                          <div class="link_title">
                            <div class=icon> 
                            <i class="fas fa-plus"></i>
                            </div>
                            <a href="/rounds/new"><span>New Round</span></a>
                          </div>
                       </li>
                       <li class="var_nav">
                          <div class="link_bg"></div>
                          <div class="link_title">
                            <div class=icon> 
                            <i class="fas fa-eye"></i>
                            </div>
                            <a href="/rounds"><span>View Rounds</span></a>
                          </div>
                       </li>
                      </UL>
                    </nav>
                </div>
            </div>
        </div>
        <div id="dashboard-viz" class="col-md-10">
            <div class="row">
                <div class="col-md-12">
                    <div id="dash-tab-menu">
                        <ul class="nav nav-tabs" id="myTab" role="tablist">
                          <li class="nav-item active">
                            <a class="nav-link active" id="summary-tab" data-toggle="tab" href="#summary" role="tab" aria-controls="summary" aria-selected="true">Summary</a>
                          </li>
                          <li class="nav-item">
                            <a class="nav-link non-home-tab" id="driving-tab" data-toggle="tab" href="#driving" role="tab" aria-controls="driving" aria-selected="false">Driving</a>
                          </li>
                          <li class="nav-item">
                            <a class="nav-link non-home-tab" id="approach-tab" data-toggle="tab" href="#approach" role="tab" aria-controls="approach" aria-selected="false">Approach</a>
                          </li>
                          <li class="nav-item">
                            <a class="nav-link non-home-tab" id="putting-tab" data-toggle="tab" href="#putting" role="tab" aria-controls="putting" aria-selected="false">Putting</a>
                          </li>
                        </ul>
                    </div>
                    <div class="tab-content" id="myTabContent">
                        <div class="tab-pane fade in show active" id="summary" role="tabpanel" aria-labelledby="summary-tab">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="counter">
                                        <h2 class="timer count-title count-number" data-to="<%= ScoreData.avgFullScore %>" data-speed="1500"></h2>
                                        <p class="count-text ">Scoring Average</p>
                                    </div>  
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <h2 class="timer count-title count-number-sign" data-to="<%= ScoreData.avgFullScoreToPar %>" data-speed="1500"></h2>
                                        <p class="count-text ">Average Score to Par</p>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="counter">
                                        <h2 class="timer count-title count-number" data-to="<%= ScoreData.avgScoreByHolePar.parThree %>" data-speed="1500"></h2>
                                        <p class="count-text ">Par 3 Scoring Avg</p>
                                    </div>
                                </div>   
                                <div class="col-md-2">
                                    <div class="counter">
                                        <h2 class="timer count-title count-number" data-to="<%= ScoreData.avgScoreByHolePar.parFour %>" data-speed="1500"></h2>
                                        <p class="count-text ">Par 4 Scoring Avg</p>
                                    </div>
                                </div> 
                                <div class="col-md-2">
                                    <div class="counter">
                                        <h2 class="timer count-title count-number" data-to="<%= ScoreData.avgScoreByHolePar.parFive %>" data-speed="1500"></h2>
                                        <p class="count-text ">Par 5 Scoring Avg</p>
                                    </div>
                                </div> 
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div id="rbd-line" class="dash-highchart">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div id="score-name-pie" class="dash-highchart">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="driving" role="tabpanel" aria-labelledby="driving-tab">
                            <div class="row">
                                <div class="col-md-3">
                                    dagfd
                                </div>
                                <div class="col-md-3">
                                    dfgdfs
                                </div>
                                <div class="col-md-6">
                                    <div id='canv-counter' class="counter">
                                        <h4>Previous Round Tee Shots</h4>
                                        <div id='drive-tracker-legend'>
                                            <h5>Legend</h5>
                                            <div id='legend-values'>
                                                <div>
                                                    <span id="par-circle"> </span><span class="legend-score-name"> par </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div id='canv-container'>
                                            <canvas id="driveTracker" width="500" height="500"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--<div class="tab-pane fade" id="approach" role="tabpanel" aria-labelledby="approach-tab">...</div>-->
                <!--<div class="tab-pane fade" id="putting" role="tabpanel" aria-labelledby="putting-tab">...</div>-->
            </div>
        </div>
    </div>
    
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.createjs.com/easeljs-0.8.1.min.js"></script>  
<script src="https://code.createjs.com/tweenjs-0.6.1.min.js"></script>
<script>
// Dash Home
    //Set Active Menu
    $('.menu_options li').removeClass('active');
    $('#dashboard_menu_option').addClass('active');
    
    $.get( '/userimg', function(data) {
        if(data.userImg == null) { 
                $('#dash-img-span').addClass("glyphicon glyphicon-user");
        } else {
                $('#dash-img-span').html("<img id='dash-prof-pic' src="+ data.userImg +" onerror='imgError(this);'>");
        } 
    });
    
    function imgError(image) {
        image.onerror = "";
        $('#dash-img-span').html("");
        $('#dash-img-span').addClass("glyphicon glyphicon-user");
        return true;
    }
    
    //Tab Menu Code
    $('.non-home-tab').click(function() {
        $("#summary").removeClass("show");
    });

    $.get( '/roundsdata', function(data) {
    //Score By Date Line Chart    
        //Get Data
        var series = data.avgScore.scoreByDate;
        //Sort Data
        function compare(a,b) {
          if (a < b)
            return -1;
          if (a > b)
            return 1;
          return 0;
        }
        series.sort(compare);
        //Convert to epoch time
        data.avgScore.scoreByDate.forEach(function(pair){
            pair[0] = Math.round((new Date(pair[0])).getTime());
        });
        
        //Create the chart
        Highcharts.chart('rbd-line', {
            chart: {
                height: 300,
                type: 'line'
            },
            title: {
                text: 'Score by Date'
            },
            xAxis: {
                    type: 'datetime',
                    dateTimeLabelFormats: 
                    {
                        hour: '%l %p'
                    }
            },
            yAxis: {
                title: {
                    text: 'Score'
                }
            },
            plotOptions: {
                series: {
                    label: {
                        connectorAllowed: false
                    }
                }
            },
            series: [{
                name: 'Score',
                data: series
            }],
            credits: {
    				enabled: false
    		},
            responsive: {
                rules: [{
                    condition: {
                        maxWidth: 500
                    },
                    chartOptions: {
                        // legend: {
                        //     layout: 'horizontal',
                        //     align: 'center',
                        //     verticalAlign: 'bottom'
                        // }
                    }
                }]
            }
        
        })
        
        //Score Name Pie Chart
        Highcharts.chart('score-name-pie', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                height: 300,
                type: 'pie'
            },
            title: {
                text: null
            },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                        style: {
                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                        }
                    }
                }
            },
            credits: {
    				enabled: false
    		},
            series: [{
                name: 'Scores',
                colorByPoint: true,
                data: [{
                    name: 'Par',
                    y: data.numScoreNames.par
                    //sliced: true,
                    //selected: true
                }, {
                    name: 'Birdie',
                    y: data.numScoreNames.birdie
                }, {
                    name: 'Bogey',
                    y: data.numScoreNames.bogey
                }, {
                    name: 'Eagle',
                    y: data.numScoreNames.eagle
                }, {
                    name: 'Double Bogey',
                    y: data.numScoreNames.doubleBogey
                }, {
                    name: 'Better Than Eagle',
                    y: data.numScoreNames.eagleBetter
                }, {
                    name: 'Worse Than Bogey',
                    y: data.numScoreNames.bogeyWorse
                }]
            }]
        });
    });
    
    (function ($) {
    	$.fn.countTo = function (options) {
    		options = options || {};
    		
    		return $(this).each(function () {
    			// set options for current element
    			var settings = $.extend({}, $.fn.countTo.defaults, {
    				from:            $(this).data('from'),
    				to:              $(this).data('to'),
    				speed:           $(this).data('speed'),
    				refreshInterval: $(this).data('refresh-interval'),
    				decimals:        $(this).data('decimals')
    			}, options);
    			
    			// how many times to update the value, and how much to increment the value on each update
    			var loops = Math.ceil(settings.speed / settings.refreshInterval),
    				increment = (settings.to - settings.from) / loops;
    			
    			// references & variables that will change with each update
    			var self = this,
    				$self = $(this),
    				loopCount = 0,
    				value = settings.from,
    				data = $self.data('countTo') || {};
    			
    			$self.data('countTo', data);
    			
    			// if an existing interval can be found, clear it first
    			if (data.interval) {
    				clearInterval(data.interval);
    			}
    			data.interval = setInterval(updateTimer, settings.refreshInterval);
    			
    			// initialize the element with the starting value
    			render(value);
    			
    			function updateTimer() {
    				value += increment;
    				loopCount++;
    				
    				render(value);
    				
    				if (typeof(settings.onUpdate) == 'function') {
    					settings.onUpdate.call(self, value);
    				}
    				
    				if (loopCount >= loops) {
    					// remove the interval
    					$self.removeData('countTo');
    					clearInterval(data.interval);
    					value = settings.to;
    					
    					if (typeof(settings.onComplete) == 'function') {
    						settings.onComplete.call(self, value);
    					}
    				}
    			}
    			
    			function render(value) {
    				var formattedValue = settings.formatter.call(self, value, settings);
    				$self.html(formattedValue);
    			}
    		});
    	};
    	
    	$.fn.countTo.defaults = {
    		from: 0,               // the number the element should start at
    		to: 0,                 // the number the element should end at
    		speed: 1000,           // how long it should take to count between the target numbers
    		refreshInterval: 100,  // how often the element should be updated
    		decimals: 1,           // the number of decimal places to show
    		formatter: formatter,  // handler for formatting the value before rendering
    		onUpdate: null,        // callback method for every time the element is updated
    		onComplete: null       // callback method for when the element finishes updating
    	};
    	
    	function formatter(value, settings) {
    		return value.toFixed(settings.decimals);
    	}
    }(jQuery));
    
    jQuery(function ($) {
      // custom formatting example
      var sign = "";
      if($('.count-number-sign').data().to > 0){
          sign = "+";
      }
      
      $('.count-number-sign').data('countToOptions', {
    	formatter: function (value, options) {
    	  return sign + value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
    	}
      });
      
      $('.count-number').data('countToOptions', {
    	formatter: function (value, options) {
    	  return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
    	}
      });
      
      // start all the timers
      $('.timer').each(count);  
      
      function count(options) {
    	var $this = $(this);
    	options = $.extend({}, options || {}, $this.data('countToOptions') || {});
    	$this.countTo(options);
      }
    });
    
    $('#driving-tab').click(function() {
        
        $.get( '/mostrecentround', function(data) {
            var driveStats = [];
            data.mostRecentRound[0].holes.forEach(function(hole){
                var holeScore = {}
                if(hole.score - hole.par === 0){
                    holeScore = {
                        scoreName: 'Par',
                        scoreColor: 'blue',
                        sortVal: 4
                    }
                } else if(hole.score - hole.par === 1){
                    holeScore = {
                        scoreName: 'Bogey',
                        scoreColor: 'red',
                        sortVal: 5
                    }
                } else if(hole.score - hole.par === -1){
                    holeScore = {
                        scoreName: 'Birdie',
                        scoreColor: 'orange',
                        sortVal: 3
                    }
                } else if(hole.score - hole.par === 2){
                    holeScore = {
                        scoreName: 'Double Bogey',
                        scoreColor: 'black',
                        sortVal: 6
                    }
                } else if(hole.score - hole.par === -2){
                    nholeScore = {
                        scoreName: 'Eagle',
                        scoreColor: 'yellow',
                        sortVal: 2
                    }
                } else if(hole.score - hole.par > 2){
                    holeScore = {
                        scoreName: 'Worse Than Double Bogey',
                        scoreColor: 'gray',
                        sortVal: 7
                    }
                } else if(hole.score - hole.par < -2){
                    holeScore = {
                        scoreName: 'Better Than Eagle',
                        scoreColor: 'pink',
                        sortVal: 1
                    }
                }
                var holeStats = {
                    teeShotDirection: hole.teeShotDirection,
                    teeShotResult: hole.teeShotResult,
                    holeScore: holeScore
                }
                if(hole.par != 3){
                    driveStats.push(holeStats);
                }
            });
            console.log(driveStats);
        
            //DriveTracker
            createjs.MotionGuidePlugin.install();
        
            var stage = new createjs.Stage("driveTracker");
            var canvas = document.getElementById("driveTracker");
            
            var timeCount = 1500;
            var arrowStartPosY = 435;
            var arrowStartPosX = 410;
            
            var scoresFound = []
            for(var i = 0; i < driveStats.length; i++) (function(i){
                //Populate Legend
                if(scoresFound.length === 0){
                    scoresFound.push(driveStats[i]);
                } else {
                    var found = false;
                    scoresFound.forEach(function(score){
                        if(score.holeScore.scoreName === driveStats[i].holeScore.scoreName){
                            found = true;
                        }
                    });
                    if(!found){
                        scoresFound.push(driveStats[i]);
                    }
                }
                
                var arrowEndPosYOrig = 0;
            	var arrowEndPosXOrig = 0;
            	var middlePosYOrig = 0;
            	var randx = 0;
            	var randy = 0;
            	if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Rough'){
            		arrowEndPosYOrig = 150;
            		arrowEndPosXOrig = 290;
            		middlePosYOrig = 150;
            		randx = Math.floor(Math.random() * 40);
            		randy = Math.floor(Math.random() * 40);
            	} else if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Bunker') {
            		arrowEndPosYOrig = 75;
            		arrowEndPosXOrig = 310;
            		middlePosYOrig = 75;
            		randx = Math.floor(Math.random() * 40);
            		randy = Math.floor(Math.random() * 65);
            	} else if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Woods') {
            		arrowEndPosYOrig = 50;
            		arrowEndPosXOrig = 450;
            		middlePosYOrig = 50;
            		randx = Math.floor(Math.random() * 25);
            		randy = Math.floor(Math.random() * 75);
            	} else if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Lost Ball') {
            		arrowEndPosYOrig = 75;
            		arrowEndPosXOrig = 500;
            		middlePosYOrig = 75;
            		randx = Math.floor(Math.random() * 1);
            		randy = Math.floor(Math.random() * 1);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Rough') {
            		arrowEndPosYOrig = 118;
            		arrowEndPosXOrig = 135;
            		middlePosYOrig = 125;
            		randx = Math.floor(Math.random() * 30);
            		randy = Math.floor(Math.random() * 40);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Bunker') {
            		arrowEndPosYOrig = 100;
            		arrowEndPosXOrig = 50;
            		middlePosYOrig = 100;
            		randx = Math.floor(Math.random() * 75);
            		randy = Math.floor(Math.random() * 150);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Fescue') {
            		arrowEndPosYOrig = 142;
            		arrowEndPosXOrig = 25;
            		middlePosYOrig = 142;
            		randx = Math.floor(Math.random() * 50);
            		randy = Math.floor(Math.random() * 1);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Woods') {
            		arrowEndPosYOrig = 30;
            		arrowEndPosXOrig = 10;
            		middlePosYOrig = 30;
            		randx = Math.floor(Math.random() * 30);
            		randy = Math.floor(Math.random() * 50);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Lost Ball') {
            		arrowEndPosYOrig = 75;
            		arrowEndPosXOrig = 0;
            		middlePosYOrig = 75;
            		randx = Math.floor(Math.random() * 1);
            		randy = Math.floor(Math.random() * 1);
            	} else if(driveStats[i].teeShotDirection === 'Long' && (driveStats[i].teeShotResult === 'Rough' || driveStats[i].teeShotResult === 'Fescue')) {
            		arrowEndPosYOrig = 25;
            		arrowEndPosXOrig = 245;
            		middlePosYOrig = 25;
            		randx = Math.floor(Math.random() * 40);
            		randy = Math.floor(Math.random() * 10);
            	} else if(driveStats[i].teeShotDirection === 'Fairway') {
            		arrowEndPosYOrig = 100;
            		arrowEndPosXOrig = 180;
            		middlePosYOrig = -100;
            		randx = Math.floor(Math.random() * 75);
            		randy = Math.floor(Math.random() * 75);
            	}
            	
            	var arrowEndPosY = arrowEndPosYOrig;
            	var arrowEndPosX = arrowEndPosXOrig;
            	var middlePosY = middlePosYOrig;			
            	
            	arrowEndPosY = arrowEndPosYOrig + randy;
            	middlePosY = middlePosYOrig + randy;
            	arrowEndPosX = arrowEndPosXOrig + randx;
            	
            		var shape = new createjs.Shape();
            		shape.cache(0,0,1000,1000);
            		var bar = { x: arrowStartPosX, y: arrowStartPosY, oldx: arrowStartPosX, oldy: arrowStartPosY };
            		stage.addChild(shape);
            
            		createjs.Ticker.addEventListener("tick", tick);
            
            		run();
            
            		function getMotionPathFromPoints (points) {
            			var i, motionPath;
            			for (i = 0, motionPath = []; i < points.length - 1; ++i) {
            				if (i === 0) {
            						motionPath.push(points[i].x, points[i].y);
            				}
            		    else if(i === 1){
            						motionPath.push(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y);
            				} else {
            						i++;
            						motionPath.push(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y);
            				}
            			}
            			return motionPath;
            		}
            
            		function run() {
            		    var points = [
            		    		//start pos
            				   	new createjs.Point(arrowStartPosX, arrowStartPosY),
            		        //Arc Bend
            				 		new createjs.Point(arrowStartPosX-10, middlePosY),
            		        //end pos
            				  	new createjs.Point(arrowEndPosX, arrowEndPosY)
            				];
            		    
            		    createjs.Tween.get(bar).wait(timeCount).to({
            		        guide: {path: getMotionPathFromPoints(points)}
            		    }, 1500);
            		}
            
            		function tick() {
            		    shape.graphics.clear()
            		        .setStrokeStyle(3, 'round', 'round')
            		        .beginStroke(driveStats[i].holeScore.scoreColor)
            		        .curveTo(bar.oldx, bar.oldy, bar.x, bar.y)
            		        .endStroke();
            		    
            		    shape.updateCache("source-over");
            		    stage.update();
            		    
            		    bar.oldx = bar.x;
            		    bar.oldy = bar.y;
            		}
            	timeCount += 1000;
            })(i);
            var legendHtml = ''
            console.log(scoresFound);
            scoresFound.sort(function (a, b) {
                return a.holeScore.sortVal - b.holeScore.sortVal;
            });
            console.log(scoresFound);
            scoresFound.forEach(function(score){
                if(score.holeScore.scoreName === 'Double Bogey'){
                    score.holeScore.scoreName = 'Double'
                }
                legendHtml += "<div><span id=legend-circle style='background-color: " + score.holeScore.scoreColor + ";'> </span><span>" + score.holeScore.scoreName + "</span></div>"
            });
            $('#legend-values').html(legendHtml);
        });
    });
        
</script>   
    
<% include ../partials/footer %>