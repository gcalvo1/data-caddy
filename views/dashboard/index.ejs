<% include ../partials/header %>
    
    <div class="container-fluid">  
        <div id="dash-left-pane" class="col-md-2">
            <div class="row">
                    <!--<span class="glyphicon glyphicon-user"></span>-->
                    <span id="dash-img-span"></span>
            </div>
            <div id="dash-name" class="row">
                <strong><%= user.name %></strong>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div id="num-holes-dropdown-div" class="form-group fg_input_head">
                        <label for="num_holes_dropdown">Number of Holes:</label>
                        <select class="form-control" id="num-holes-dropdown">
                            <% roundTypes.forEach(function(type){
                                if(type.found){ %>
                                    <option value="<%= type.numHoles %>"><%= type.numHoles %></option>
                             <% }     
                            }); %>
                        </select>
                    </div>
                    <div id="tee-club-dropdown-div" class="form-group fg_input_head hidden">
                        <label for="tee_club_dropdown">Choose Club:</label>
                        <select class="form-control" id="tee-club-dropdown">
                        </select>
                    </div>
                    <div id="approach-club-dropdown-div" class="form-group fg_input_head hidden">
                        <label for="approach_club_dropdown">Choose Club:</label>
                        <select class="form-control" id="approach-club-dropdown">
                        </select>
                    </div>
                    <nav id="dash-left-menu">
                      <UL>
                       <li class="var_nav">
                          <div class="link_bg"></div>
                          <div class="link_title">
                            <div class=icon> 
                            <i class="fas fa-plus"></i>
                            </div>
                            <a href="/rounds/new"><span>New Round</span></a>
                          </div>
                       </li>
                       <li class="var_nav">
                          <div class="link_bg"></div>
                          <div class="link_title">
                            <div class=icon> 
                            <i class="fas fa-eye"></i>
                            </div>
                            <a href="/rounds"><span>View Rounds</span></a>
                          </div>
                       </li>
                      </UL>
                    </nav>
                </div>
            </div>
        </div>
        <div id="dashboard-viz" class="col-md-10">
            <div class="row">
                <div class="col-md-12">
                    <div id="dash-tab-menu">
                        <ul class="nav nav-tabs" id="myTab" role="tablist">
                          <li id="summary-li" class="nav-item active">
                            <a class="nav-link active non-driving-tab non-approach-tab" id="summary-tab" data-toggle="tab" href="#summary" role="tab" aria-controls="summary" aria-selected="true">Summary</a>
                          </li>
                          <li id="driving-tab-li" class="nav-item">
                            <a class="nav-link non-home-tab non-approach-tab" id="driving-tab" data-toggle="tab" href="#driving" role="tab" aria-controls="driving" aria-selected="false">Driving</a>
                          </li>
                          <li id="approach-tab-li" class="nav-item">
                            <a class="nav-link non-home-tab non-driving-tab" id="approach-tab" data-toggle="tab" href="#approach" role="tab" aria-controls="approach" aria-selected="false">Approach</a>
                          </li>
                          <li id="short-game-tab-li" class="nav-item">
                            <a class="nav-link non-home-tab non-driving-tab non-approach-tab" id="short-game-tab" data-toggle="tab" href="#short-game" role="tab" aria-controls="short-game" aria-selected="false">Short Game</a>
                          </li>
                        </ul>
                    </div>
                    <div class="tab-content" id="myTabContent">
                        <div class="tab-pane fade in show active" id="summary" role="tabpanel" aria-labelledby="summary-tab">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="counter">
                                        <h2 id="scoring-avg" class="timer count-title count-number" data-to="" data-speed="1500"></h2>
                                        <p class="count-text ">Scoring Average</p>
                                    </div>  
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <h2 id ="avg-score-to-par" class="timer count-title count-number-sign" data-to="" data-speed="1500"></h2>
                                        <p class="count-text ">Average Score to Par</p>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="counter">
                                        <h2 id="par-three-scoring-avg" class="timer count-title count-number" data-to="" data-speed="1500"></h2>
                                        <p class="count-text ">Par 3 Scoring Avg</p>
                                    </div>
                                </div>   
                                <div class="col-md-2">
                                    <div class="counter">
                                        <h2 id="par-four-scoring-avg" class="timer count-title count-number" data-to="" data-speed="1500"></h2>
                                        <p class="count-text ">Par 4 Scoring Avg</p>
                                    </div>
                                </div> 
                                <div class="col-md-2">
                                    <div class="counter">
                                        <h2 id="par-five-scoring-avg" class="timer count-title count-number" data-to="" data-speed="1500"></h2>
                                        <p class="count-text ">Par 5 Scoring Avg</p>
                                    </div>
                                </div> 
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div id="rbd-line" class="dash-highchart"></div>
                                </div>
                                <div class="col-md-6">
                                    <div id="score-name-pie" class="dash-highchart">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="driving" role="tabpanel" aria-labelledby="driving-tab">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="counter">
                                                <span id="fir-ratio" class="dashboard-ratio">
                                                </span>
                                                <div>
                                                    <h2 id="fir-percent" class="timer count-title count-number-percent with-ratio" data-to="" data-speed="1500"></h2>
                                                    <p class="count-text ">FIR %</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="counter">
                                                <h2 id="driving-distance" class="timer count-title count-number" data-to="" data-speed="1500"></h2>
                                                <p class="count-text ">Average Tee Shot Distance</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div id="fir-per-round-line"></div>
                                        </div>
                                    </div>
                                </div>    
                                <div class="col-md-6">
                                    <div id='canv-counter' class="counter">
                                        <h4>Previous Round Tee Shots</h4>
                                        <div id='drive-tracker-legend'>
                                            <button class="btn btn-info" id="reset-drive-tracker">Play Again</button>
                                            <h5>Legend</h5>
                                            <div id='legend-values'>
                                                <div>
                                                    <span id="par-circle"> </span><span class="legend-score-name"> par </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div id='canv-container'>
                                            <canvas id="driveTracker" width="500" height="500"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="tee-miss-left-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="tee-miss-left" class="timer count-title count-number with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Miss Left %</p>
                                        </div>
                                    </div>  
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="tee-miss-right-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="tee-miss-right" class="timer count-title count-number with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Miss Right %</p>
                                        </div>
                                    </div>  
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="tee-miss-long-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="tee-miss-long" class="timer count-title count-number with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Miss Short %</p>
                                        </div>
                                    </div>  
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="tee-miss-short-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="tee-miss-short" class="timer count-title count-number with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Miss Long %</p>
                                        </div>
                                    </div>  
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="approach" role="tabpanel" aria-labelledby="approach-tab">
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="counter">
                                                <span id="gir-ratio" class="dashboard-ratio">
                                                </span>
                                                <div>
                                                    <h2 id="gir-percent" class="timer count-title count-number-percent with-ratio" data-to="" data-speed="1500"></h2>
                                                    <p class="count-text ">GIR %</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="counter">
                                                <h2 id="approach-distance" class="timer count-title count-number" data-to="" data-speed="1500"></h2>
                                                <p class="count-text ">Average Approach Distance</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div id="approach-spray-area"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="row">
                                        <div id="approach-miss-table-div" class="counter">
                                            <div id="miss-spread-title">
                                                Miss Trap Spread
                                            </div>
                                            <table id='approach-miss-table' class="table table-bordered">
                                              <tbody>
                                                <tr>
                                                    <td id="approach-fringe-td">
                                                        <div class="approach-miss-label">
                                                            <div class="approach-miss-num" id="approach-miss-fringe">
                                                            </div>
                                                            <div>
                                                                Fringe
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td id="approach-rough-td">
                                                        <div class="approach-miss-label">
                                                            <div class="approach-miss-num" id="approach-miss-rough">
                                                            </div>
                                                            <div>
                                                                Rough
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td id="approach-bunker-td">
                                                        <div class="approach-miss-label">
                                                            <div class="approach-miss-num" id="approach-miss-bunker">
                                                            </div>
                                                            <div>
                                                                Bunker
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td id="approach-fescue-td">
                                                        <div class="approach-miss-label">
                                                            <div class="approach-miss-num" id="approach-miss-fescue">
                                                            </div>
                                                            <div>
                                                                Fescue
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td id="approach-woods-td">
                                                        <div class="approach-miss-label">
                                                            <div class="approach-miss-num" id="approach-miss-woods">
                                                            </div>
                                                            <div>
                                                                Woods
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td id="approach-water-td">
                                                        <div class="approach-miss-label">
                                                            <div class="approach-miss-num" id="approach-miss-water">
                                                            </div>
                                                            <div>
                                                                Water
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                              </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>    
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="approach-miss-left-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="approach-miss-left" class="timer count-title count-number with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Miss Left %</p>
                                        </div>
                                    </div>  
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="approach-miss-right-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="approach-miss-right" class="timer count-title count-number with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Miss Right %</p>
                                        </div>
                                    </div>  
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="approach-miss-long-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="approach-miss-long" class="timer count-title count-number with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Miss Short %</p>
                                        </div>
                                    </div>  
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="approach-miss-short-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="approach-miss-short" class="timer count-title count-number with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Miss Long %</p>
                                        </div>
                                    </div>  
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="short-game" role="tabpanel" aria-labelledby="short-game-tab">
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="counter">
                                        <h2 id="num-scramble-attempts" class="timer count-title count-number" data-to="" data-speed="1500"></h2>
                                        <p class="count-text "># Scramble Attempts</p>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="scramble-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="scramble-percent" class="timer count-title count-number-percent with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Scramble %</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <span id="scramble-ratio" class="dashboard-ratio">
                                        </span>
                                        <div>
                                            <h2 id="sand-save-percent" class="timer count-title count-number-percent with-ratio" data-to="" data-speed="1500"></h2>
                                            <p class="count-text ">Sand Save %</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="counter">
                                        <h2 id="putts-per-round" class="timer count-title count-number" data-to="" data-speed="1500"></h2>
                                        <p class="count-text ">Putts Per Round</p>
                                    </div>
                                </div>
                            </div>    
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.createjs.com/easeljs-0.8.1.min.js"></script>  
<script src="https://code.createjs.com/tweenjs-0.6.1.min.js"></script>
<script>
// Dash Home
    //Set Active Menu
    $('.menu_options li').removeClass('active');
    $('#dashboard_menu_option').addClass('active');
    
    $.get( '/userimg', function(data) {
        if(data.userImg == null) { 
                $('#dash-img-span').addClass("glyphicon glyphicon-user");
        } else {
                $('#dash-img-span').html("<img id='dash-prof-pic' src="+ data.userImg +" onerror='imgError(this);'>");
        } 
    });
    
    function imgError(image) {
        image.onerror = "";
        $('#dash-img-span').html("");
        $('#dash-img-span').addClass("glyphicon glyphicon-user");
        return true;
    }
    
    //numCounterUpdate();
    
    //Set driving data based on driving tab click
    $(function() {
        $('#driving-tab').on('click', function(){
            setDrivingDashboard();
        });
    });
    //Set driving data based on filter change
    $(function() {
        $('#tee-club-dropdown').change(function(){
            setDrivingDashboard();
        });
    });
    //Set approach data based on approach tab click
    $(function() {
        $('#approach-tab').on('click', function(){
            setApproachDashboard();
        });
    });
    //Set approach data based on filter change
    $(function() {
        $('#approach-club-dropdown').change(function(){
            setApproachDashboard();
        });
    });
    //Set approach data based on approach tab click
    $(function() {
        $('#short-game-tab').on('click', function(){
            setShortGameDashboard();
        });
    });
    
    //Toggle filters
    $('#driving-tab').on('click', function(){
        $('#tee-club-dropdown-div').removeClass("hidden");
        //$('#tee-club-dropdown').trigger("change");
    });
    $('.non-driving-tab').on('click', function(){
        $('#tee-club-dropdown-div').addClass("hidden");
    });
    $('#approach-tab').on('click', function(){
        $('#approach-club-dropdown-div').removeClass("hidden");
        //$('#approach-club-dropdown').trigger("change");
    });
    $('.non-approach-tab').on('click', function(){
        $('#approach-club-dropdown-div').addClass("hidden");
    });
    
    //Tab Menu Code
    $('.non-home-tab').click(function() {
        $("#summary").removeClass("show");
    });
    
    $('#driving-tab').click(function() {
        var numHoles = $("#num-holes-dropdown :selected").text(),
            isFull = true;
        if (numHoles === "9 Holes") {
            isFull = false;
        }
        var parameters = {isFull: isFull};
        driveTracker(parameters, "All");
    });
    
    $('#reset-drive-tracker').click(function() {
        var numHoles = $("#num-holes-dropdown :selected").text(),
            club = $("#tee-club-dropdown :selected").text(),
            isFull = true;
        if (numHoles === "9 Holes") {
            isFull = false;
        }
        var parameters = {isFull: isFull};
        driveTracker(parameters, club);
    });
    
    //On NumHoles change update: filters & data 
    $('#num-holes-dropdown').change(function(){
        var numHoles = $("#num-holes-dropdown :selected").text(),
            isFull = true;
        if (numHoles === "9 Holes") {
            isFull = false;
        }
        var parameters = { isFull: isFull };
        //$('#tee-club-dropdown').trigger("change");
        //$('#approach-club-dropdown').trigger("change");
        $.get( '/dashboard/roundsdata', parameters, function(data) {
            //Set Tee Club Dropdown
            teeClubDropdownHtml = "<option value='all'>All</option>";
            data.allClubs.forEach(function(club){
                if(club.teeFound) {
                    teeClubDropdownHtml += "<option value=" + club.clubName + ">" + club.clubName + "</option>";
                 }     
            });
            $('#tee-club-dropdown').html(teeClubDropdownHtml);
            //Set Approach Club Dropdown
            approachClubDropdownHtml = "<option value='all'>All</option>";
            data.allClubs.forEach(function(club){
                if(club.approachFound) {
                    approachClubDropdownHtml += "<option value=" + club.clubName + ">" + club.clubName + "</option>";
                 }     
            });
            $('#approach-club-dropdown').html(approachClubDropdownHtml);
            
            //Set current dashboard data for reset filters
            if($('#driving-tab-li').hasClass('active')){
                setDrivingDashboard();
            }
            if($('#approach-tab-li').hasClass('active')){
                setApproachDashboard();
            }
            if($('#short-game-tab-li').hasClass('active')){
                setShortGameDashboard();
            }
            
            //Set Summary Data Cards
            $('#scoring-avg').html(Math.round(data.avgScore.avgScore * 10) / 10);
            $('#avg-score-to-par').html(Math.round(data.avgScore.avgScoreToPar * 10) / 10);
            $('#par-three-scoring-avg').html(Math.round(data.avgScore.avgScoreByHolePar.parThree * 10) / 10);
            $('#par-four-scoring-avg').html(Math.round(data.avgScore.avgScoreByHolePar.parFour * 10) / 10);
            $('#par-five-scoring-avg').html(Math.round(data.avgScore.avgScoreByHolePar.parFive * 10) / 10);
            
            //Score By Date Line Chart    
            //Get Data
            var series = data.avgScore.scoreByDate;
            //Sort Data
            function compare(a,b) {
              if (a < b)
                return -1;
              if (a > b)
                return 1;
              return 0;
            }
            series.sort(compare);
            //Convert to epoch time
            data.avgScore.scoreByDate.forEach(function(pair){
                pair[0] = Math.round((new Date(pair[0])).getTime());
            });
            
            //Create the chart
            Highcharts.chart('rbd-line', {
                chart: {
                    height: 300,
                    type: 'line'
                },
                title: {
                    text: 'Score by Date'
                },
                xAxis: {
                        type: 'datetime',
                        dateTimeLabelFormats: 
                        {
                            hour: '%l %p'
                        }
                },
                yAxis: {
                    title: {
                        text: 'Score'
                    }
                },
                plotOptions: {
                    series: {
                        label: {
                            connectorAllowed: false
                        }
                    }
                },
                series: [{
                    name: 'Score',
                    data: series
                }],
                credits: {
        				enabled: false
        		},
                responsive: {
                    rules: [{
                        condition: {
                            maxWidth: 500
                        },
                        chartOptions: {
                            // legend: {
                            //     layout: 'horizontal',
                            //     align: 'center',
                            //     verticalAlign: 'bottom'
                            // }
                        }
                    }]
                }
            
            })
            
            //Score Name Pie Chart
            Highcharts.chart('score-name-pie', {
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    height: 300,
                    type: 'pie'
                },
                title: {
                    text: null
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                            style: {
                                color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                            }
                        }
                    }
                },
                credits: {
        				enabled: false
        		},
                series: [{
                    name: 'Scores',
                    colorByPoint: true,
                    data: [{
                        name: 'Par',
                        y: data.numScoreNames.par
                        //sliced: true,
                        //selected: true
                    }, {
                        name: 'Birdie',
                        y: data.numScoreNames.birdie
                    }, {
                        name: 'Bogey',
                        y: data.numScoreNames.bogey
                    }, {
                        name: 'Eagle',
                        y: data.numScoreNames.eagle
                    }, {
                        name: 'Double Bogey',
                        y: data.numScoreNames.doubleBogey
                    }, {
                        name: 'Better Than Eagle',
                        y: data.numScoreNames.eagleBetter
                    }, {
                        name: 'Worse Than Bogey',
                        y: data.numScoreNames.bogeyWorse
                    }]
                }]
            });
        });
    });
    
    function setDrivingDashboard() {
        var numHoles = $("#num-holes-dropdown :selected").text(),
            club = $("#tee-club-dropdown :selected").text(),
            isFull = true;
        if (numHoles === "9 Holes") {
            isFull = false;
        }
        var parameters = { isFull: isFull, club: club };
        if($('#driving-tab-li').hasClass('active')){
            driveTracker(parameters, club);
        }
        $.get( '/dashboard/roundsdata', parameters, function(data) {
            var totalFirs = 0,
                totalDrives = 0,
                totalDrivingDistance = 0,
                totalMiss = {
                    right: 0,
                    left: 0,
                    short: 0,
                    long: 0
                }
                numDrivesWithDistance = 0
                firByDate = [];
            if(club === "All"){
                data.rounds.forEach(function(round){
                    var roundFirData = [],
                        roundFirs = 0;
                    roundFirData.push(round.date);
                    round.holes.forEach(function(hole){
                        if(hole.par != 3) {
                            totalDrives++;
                            if(hole.teeShot.teeShotResult === "FIR"){
                                totalFirs++;
                                roundFirs++;
                            } else if(hole.teeShot.teeShotDirection === "Right") {
                                totalMiss.right++;
                            } else if(hole.teeShot.teeShotDirection === "Left") {
                                totalMiss.left++;
                            } else if(hole.teeShot.teeShotDirection === "Long") {
                                totalMiss.long++;
                            } else if(hole.teeShot.teeShotDirection === "Short") {
                                totalMiss.short++;
                            }
                            if(hole.teeShot.teeShotLength){
                                numDrivesWithDistance++;
                                totalDrivingDistance += hole.teeShot.teeShotLength;
                            }
                        }
                    });
                    roundFirData.push(roundFirs);
                    firByDate.push(roundFirData);
                });
            } else {
                data.rounds.forEach(function(round){
                    var roundFirData = [],
                        roundFirs = 0;
                    roundFirData.push(round.date);
                    round.holes.forEach(function(hole){
                        if(hole.par != 3 && hole.teeShot.teeShotClub === club) {
                            totalDrives++;
                            if(hole.teeShot.teeShotResult === "FIR"){
                                totalFirs++;
                                roundFirs++;
                            } else if(hole.teeShot.teeShotDirection === "Right") {
                                totalMiss.right++;
                            } else if(hole.teeShot.teeShotDirection === "Left") {
                                totalMiss.left++;
                            } else if(hole.teeShot.teeShotDirection === "Long") {
                                totalMiss.long++;
                            } else if(hole.teeShot.teeShotDirection === "Short") {
                                totalMiss.short++;
                            }
                            if(hole.teeShot.teeShotLength){
                                numDrivesWithDistance++;
                                totalDrivingDistance += hole.teeShot.teeShotLength;
                            }
                        }
                    });
                    roundFirData.push(roundFirs);
                    firByDate.push(roundFirData);
                });
            }
            //Set data for selected tee club
            var firPercent = ( totalFirs / totalDrives ) * 100,
                avgDrivingDistance = totalDrivingDistance / numDrivesWithDistance,
                driveMissPercent = {
                    right: ( totalMiss.right / totalDrives ) * 100,
                    left: ( totalMiss.left / totalDrives ) * 100,
                    long: ( totalMiss.long / totalDrives ) * 100,
                    short: ( totalMiss.short / totalDrives ) * 100
                }
            if(totalDrives === 0){
                $("#driving-distance").html("N/A");
                $("#fir-percent").html("N/A");
                $("#tee-miss-right").html("N/A");
                $("#tee-miss-left").html("N/A");
                $("#tee-miss-long").html("N/A");
                $("#tee-miss-short").html("N/A");
                $("#fir-ratio").html("");
                $("#tee-miss-right-ratio").html("");
                $("#tee-miss-left-ratio").html("");
                $("#tee-miss-long-ratio").html("");
                $("#tee-miss-short-ratio").html("");
            } else {
                $("#driving-distance").html(Math.round(avgDrivingDistance * 10) / 10 + " yds");
                $("#fir-percent").html(Math.round(firPercent * 10) / 10 + "%");
                $("#tee-miss-right").html(Math.round(driveMissPercent.right * 10) / 10 + "%");
                $("#tee-miss-left").html(Math.round(driveMissPercent.left * 10) / 10 + "%");
                $("#tee-miss-long").html(Math.round(driveMissPercent.long * 10) / 10 + "%");
                $("#tee-miss-short").html(Math.round(driveMissPercent.short * 10) / 10 + "%");
                $("#fir-ratio").html(totalFirs + "/" + totalDrives);
                $("#tee-miss-right-ratio").html(totalMiss.right + "/" + totalDrives);
                $("#tee-miss-left-ratio").html(totalMiss.left + "/" + totalDrives);
                $("#tee-miss-long-ratio").html(totalMiss.long + "/" + totalDrives);
                $("#tee-miss-short-ratio").html(totalMiss.short + "/" + totalDrives);
            }
            // $("#fir-percent").html(Math.round(firPercent * 10) / 10 + "%");
            // $("#tee-miss-right").html(Math.round(driveMissPercent.right * 10) / 10 + "%");
            // $("#tee-miss-left").html(Math.round(driveMissPercent.left * 10) / 10 + "%");
            // $("#tee-miss-long").html(Math.round(driveMissPercent.long * 10) / 10 + "%");
            // $("#tee-miss-short").html(Math.round(driveMissPercent.short * 10) / 10 + "%");
            
            //Line Chart
            var series = firByDate;
            //Sort Data
            function compare(a,b) {
              if (a < b)
                return -1;
              if (a > b)
                return 1;
              return 0;
            }
            series.sort(compare);
            //Convert to epoch time
            series.forEach(function(pair){
                pair[0] = Math.round((new Date(pair[0])).getTime());
            });
            
            //Create the chart
            Highcharts.chart('fir-per-round-line', {
                chart: {
                    height: 407,
                    type: 'line'
                },
                title: {
                    text: 'FIR by Round'
                },
                xAxis: {
                        type: 'datetime',
                        dateTimeLabelFormats: 
                        {
                            hour: '%l %p'
                        }
                },
                yAxis: {
                    title: {
                        text: 'FIRs'
                    }
                },
                plotOptions: {
                    series: {
                        label: {
                            connectorAllowed: false
                        }
                    }
                },
                series: [{
                    name: 'FIRs',
                    data: series
                }],
                credits: {
        				enabled: false
        		},
                responsive: {
                    rules: [{
                        condition: {
                            maxWidth: 500
                        },
                        chartOptions: {
                            // legend: {
                            //     layout: 'horizontal',
                            //     align: 'center',
                            //     verticalAlign: 'bottom'
                            // }
                        }
                    }]
                }
            })
        });
    };
    
    function setApproachDashboard() {
        var numHoles = $("#num-holes-dropdown :selected").text(),
            club = $("#approach-club-dropdown :selected").text(),
            isFull = true;
        if (numHoles === "9 Holes") {
            isFull = false;
        }
        var parameters = { isFull: isFull, club: club };
        // if($('#approach-li').hasClass('active')){
        //     approachTracker(parameters, club);
        // }
        $.get( '/dashboard/roundsdata', parameters, function(data) {
            var totalGirs = 0,
                totalApproaches = 0,
                totalApproachDistance = 0,
                totalHoles = 0,
                totalMiss = {
                    right: 0,
                    left: 0,
                    short: 0,
                    long: 0,
                    gir: 0,
                },
                totalMissHazzard = {
                    rough: 0,
                    bunker: 0,
                    fescue: 0,
                    water: 0,
                    woods: 0,
                    fairway: 0,
                    fringe: 0,
                    gir: 0
                },
                girByDate = [];
                approachSpreadByDate = []
            if(club === "All"){
                data.rounds.forEach(function(round){
                    var roundGirData = [],
                        approachSpreadData = [],
                        roundGirs = 0,
                        roundMiss = {
                            right: 0,
                            left: 0,
                            short: 0,
                            long: 0,
                            gir: 0,
                        };
                    roundGirData.push(round.date);
                    approachSpreadData.push(round.date);
                    round.holes.forEach(function(hole){
                        totalHoles++;
                        if(hole.approach.approachToGreen){
                            totalApproaches++;
                            totalApproachDistance += hole.approach.approachLength;
                            //Set directional miss
                            if(hole.approach.approachResult === "GIR"){
                                totalGirs++;
                                roundGirs++;
                                totalMiss.gir++;
                                roundMiss.gir++;
                            } else if(hole.approach.approachDirection === "Right") {
                                totalMiss.right++;
                                roundMiss.right++;
                            } else if(hole.approach.approachDirection === "Left") {
                                totalMiss.left++;
                                roundMiss.left++;
                            } else if(hole.approach.approachDirection === "Long") {
                                totalMiss.long++;
                                roundMiss.long++;
                            } else if(hole.approach.approachDirection === "Short") {
                                totalMiss.short++;
                                roundMiss.short++;
                            }
                            //Set hazard miss
                            totalMissHazzard[hole.approach.approachResult.toLowerCase()]++;
                        }
                    });
                    roundGirData.push(roundGirs);
                    girByDate.push(roundGirData);
                    approachSpreadData.push(roundMiss);
                    approachSpreadByDate.push(approachSpreadData);
                });
            } else {
                data.rounds.forEach(function(round){
                    var roundGirData = [],
                        approachSpreadData = [],
                        roundGirs = 0,
                        roundMiss = {
                            right: 0,
                            left: 0,
                            short: 0,
                            long: 0,
                            gir: 0,
                        };
                    roundGirData.push(round.date);
                    approachSpreadData.push(round.date);
                    round.holes.forEach(function(hole){
                        totalHoles++;
                        if(hole.approach.approachToGreen && hole.approach.approachClub === club){
                            totalApproaches++;
                            totalApproachDistance += hole.approach.approachLength;
                            if(hole.approach.approachResult === "GIR"){
                                totalGirs++;
                                roundGirs++;
                                totalMiss.gir++;
                                roundMiss.gir++;
                            } else if(hole.approach.approachDirection === "Right") {
                                totalMiss.right++;
                                roundMiss.right++;
                            } else if(hole.approach.approachDirection === "Left") {
                                totalMiss.left++;
                                roundMiss.left++;
                            } else if(hole.approach.approachDirection === "Long") {
                                totalMiss.long++;
                                roundMiss.long++;
                            } else if(hole.approach.approachDirection === "Short") {
                                totalMiss.short++;
                                roundMiss.short++;
                            }
                            //Set hazard miss
                            totalMissHazzard[hole.approach.approachResult.toLowerCase()]++;
                        }
                    });
                    roundGirData.push(roundGirs);
                    girByDate.push(roundGirData);
                    approachSpreadData.push(roundMiss);
                    approachSpreadByDate.push(approachSpreadData);
                });
            }
            //Set data for selected tee club
            console.log(totalMissHazzard);
            var girPercent = ( totalGirs / totalHoles ) * 100,
                avgApproachDistance = totalApproachDistance / totalApproaches,
                approachMissPercent = {
                    right: ( totalMiss.right / totalApproaches ) * 100,
                    left: ( totalMiss.left / totalApproaches ) * 100,
                    long: ( totalMiss.long / totalApproaches ) * 100,
                    short: ( totalMiss.short / totalApproaches ) * 100
                } 
            //Protect against divide by zero
            if(totalHoles === 0){
                $("#gir-percent").html("N/A");
                $("#gir-ratio").html("");
            } else {
                $("#gir-percent").html(Math.round(girPercent * 10) / 10 + "%");
                $("#gir-ratio").html(totalGirs + "/" + totalHoles);
            }
            if(totalApproaches === 0){
                $("#approach-miss-right").html("N/A");
                $("#approach-miss-left").html("N/A");
                $("#approach-miss-long").html("N/A");
                $("#approach-miss-short").html("N/A");
                $("#approach-miss-right-ratio").html("");
                $("#approach-miss-left-ratio").html("");
                $("#approach-miss-long-ratio").html("");
                $("#approach-miss-short-ratio").html("");
            } else {
                $("#approach-miss-right").html(Math.round(approachMissPercent.right * 10) / 10 + "%");
                $("#approach-miss-left").html(Math.round(approachMissPercent.left * 10) / 10 + "%");
                $("#approach-miss-long").html(Math.round(approachMissPercent.long * 10) / 10 + "%");
                $("#approach-miss-short").html(Math.round(approachMissPercent.short * 10) / 10 + "%");
                $("#approach-miss-right-ratio").html(totalMiss.right + "/" + totalApproaches);
                $("#approach-miss-left-ratio").html(totalMiss.left + "/" + totalApproaches);
                $("#approach-miss-long-ratio").html(totalMiss.long + "/" + totalApproaches);
                $("#approach-miss-short-ratio").html(totalMiss.short + "/" + totalApproaches);
            }
            $("#approach-distance").html(Math.round(avgApproachDistance * 10) / 10 + " yds");
            $("#approach-miss-rough").html(Math.round(totalMissHazzard.rough * 10) / 10);
            $("#approach-miss-bunker").html(Math.round(totalMissHazzard.bunker * 10) / 10);
            $("#approach-miss-woods").html(Math.round(totalMissHazzard.woods * 10) / 10);
            $("#approach-miss-fescue").html(Math.round(totalMissHazzard.fescue * 10) / 10);
            $("#approach-miss-water").html(Math.round(totalMissHazzard.water * 10) / 10);
            $("#approach-miss-fringe").html(Math.round(totalMissHazzard.fringe * 10) / 10);
            
            //Area Chart
            var series = approachSpreadByDate;
            //Sort Data
            function compare(a,b) {
              if (a < b)
                return -1;
              if (a > b)
                return 1;
              return 0;
            }
            series.sort(compare);
            //Convert to epoch time
            series.forEach(function(pair){
                pair[0] = Math.round((new Date(pair[0])).getTime());
            });
            
            var girArray = [],
                missRightArray = [],
                missLeftArray = [],
                missShortArray = [],
                missLongArray = [];
               
            series.forEach(function(round){
                girArray.push([round[0],round[1].gir]);
                missRightArray.push([round[0],round[1].right]);
                missLeftArray.push([round[0],round[1].left]);
                missShortArray.push([round[0],round[1].short]);
                missLongArray.push([round[0],round[1].long]);
            });
            
            Highcharts.chart('approach-spray-area', {
                chart: {
                    type: 'area'
                },
                title: {
                    text: 'Approach Spread'
                },
                xAxis: {
                    type: 'datetime',
                    tickmarkPlacement: 'on',
                    title: {
                        enabled: false
                    },
                    dateTimeLabelFormats: 
                    {
                        hour: '%l %p'
                    }
                },
                yAxis: {
                    title: {
                        text: 'Percent'
                    }
                },
                tooltip: {
                    pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.percentage:.1f}%</b><br/>',
                    split: true
                },
                plotOptions: {
                    area: {
                        stacking: 'percent',
                        lineColor: '#ffffff',
                        lineWidth: 1,
                        marker: {
                            lineWidth: 1,
                            lineColor: '#ffffff'
                        }
                    }
                },
                series: [{
                    name: 'GIR',
                    data: girArray
                }, {
                    name: 'Long',
                    data: missLongArray
                }, {
                    name: 'Left',
                    data: missLeftArray
                }, {
                    name: 'Right',
                    data: missRightArray
                }, {
                    name: 'Short',
                    data: missShortArray
                }],
                credits: {
        				enabled: false
        		}
            });
        });
    };
    
    function setShortGameDashboard() {
        var numHoles = $("#num-holes-dropdown :selected").text(),
            isFull = true;
        if (numHoles === "9 Holes") {
            isFull = false;
        }
        var parameters = { isFull: isFull };
        $.get( '/dashboard/roundsdata', parameters, function(data) {
            var totalScrambleAttempts = 0,
                totalScrambles = 0,
                totalSandSaveAttempts = 0,
                totalSandSaves = 0,
                totalPutts = 0,
                totalRounds = 0
            data.rounds.forEach(function(round){
                totalRounds++;
                round.holes.forEach(function(hole){
                    totalPutts += hole.putts;
                    if(!hole.approach.approachResult || hole.approach.approachResult != "GIR"){
                        totalScrambleAttempts++;
                        if(hole.score === hole.par){
                            totalScrambles++;
                        }
                    }
                    if(hole.approach.approachResult === "Bunker"){
                        totalSandSaveAttempts++;
                        if(hole.score === hole.par){
                            totalSandSaves++;
                        }
                    }
                });
            });
            var scramblePercent = ( totalScrambles / totalScrambleAttempts ) * 100,
                sandSavePercent = ( totalSandSaves / totalSandSaveAttempts ) * 100,
                puttsPerRound = (totalRounds / totalPutts);
                
            //Protect against divide by zero
            if(totalScrambleAttempts === 0){
                $("#scramble-percent").html("N/A");
                $("#scramble-ratio").html("");
            } else {
                $("#scramble-percent").html(Math.round(scramblePercent * 10) / 10 + "%");
                $("#scramble-ratio").html(totalScrambles + "/" + totalScrambleAttempts);
            }
            if(totalSandSaveAttempts === 0){
                $("#sand-save-percent").html("N/A");
                $("#sand-save-ratio").html("");
            } else {
                $("#sand-save-percent").html(Math.round(sandSavePercent * 10) / 10 + "%");
                $("#sand-save-ratio").html(totalSandSaves + "/" + totalSandSaveAttempts);
            }
            //Set approach data
            $("#num-scramble-attempts").html(Math.round(totalScrambleAttempts * 10) / 10);
            $("#putts-per-round").html(Math.round(scramblePercent * 10) / 10);
        });
    };
    
    $(function() {
        if($('#summary-li').hasClass('active')){
            $('#num-holes-dropdown').trigger("change");
        }
    });
    
    function numCounterUpdate(){
        (function ($) {
        	$.fn.countTo = function (options) {
        		options = options || {};
        		
        		return $(this).each(function () {
        			// set options for current element
        			var settings = $.extend({}, $.fn.countTo.defaults, {
        				from:            $(this).data('from'),
        				to:              $(this).data('to'),
        				speed:           $(this).data('speed'),
        				refreshInterval: $(this).data('refresh-interval'),
        				decimals:        $(this).data('decimals')
        			}, options);
        			
        			// how many times to update the value, and how much to increment the value on each update
        			var loops = Math.ceil(settings.speed / settings.refreshInterval),
        				increment = (settings.to - settings.from) / loops;
        			
        			// references & variables that will change with each update
        			var self = this,
        				$self = $(this),
        				loopCount = 0,
        				value = settings.from,
        				data = $self.data('countTo') || {};
        			
        			$self.data('countTo', data);
        			
        			// if an existing interval can be found, clear it first
        			if (data.interval) {
        				clearInterval(data.interval);
        			}
        			data.interval = setInterval(updateTimer, settings.refreshInterval);
        			
        			// initialize the element with the starting value
        			render(value);
        			
        			function updateTimer() {
        				value += increment;
        				loopCount++;
        				
        				render(value);
        				
        				if (typeof(settings.onUpdate) == 'function') {
        					settings.onUpdate.call(self, value);
        				}
        				
        				if (loopCount >= loops) {
        					// remove the interval
        					$self.removeData('countTo');
        					clearInterval(data.interval);
        					value = settings.to;
        					
        					if (typeof(settings.onComplete) == 'function') {
        						settings.onComplete.call(self, value);
        					}
        				}
        			}
        			
        			function render(value) {
        				var formattedValue = settings.formatter.call(self, value, settings);
        				$self.html(formattedValue);
        			}
        		});
        	};
        	
        	$.fn.countTo.defaults = {
        		from: 0,               // the number the element should start at
        		to: 0,                 // the number the element should end at
        		speed: 1000,           // how long it should take to count between the target numbers
        		refreshInterval: 100,  // how often the element should be updated
        		decimals: 1,           // the number of decimal places to show
        		formatter: formatter,  // handler for formatting the value before rendering
        		onUpdate: null,        // callback method for every time the element is updated
        		onComplete: null       // callback method for when the element finishes updating
        	};
        	
        	function formatter(value, settings) {
        		return value.toFixed(settings.decimals);
        	}
        }(jQuery));
        
        jQuery(function ($) {
          // custom formatting example
          var sign = "";
          if($('.count-number-sign').data().to > 0){
              sign = "+";
          }
          
          $('.count-number-sign').data('countToOptions', {
        	  formatter: function (value, options) {
        	  return sign + value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
        	}
          });
          
          $('.count-number-percent').data('countToOptions', {
              formatter: function (value, options) {
        	  return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',') + " %";
        	}
          });
          $('.count-number').data('countToOptions', {
              formatter: function (value, options) {
        	  return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
        	}
          });
          
          // start all the timers
          $('.timer').each(count);  
          
          function count(options) {
        	var $this = $(this);
        	options = $.extend({}, options || {}, $this.data('countToOptions') || {});
        	$this.countTo(options);
          }
        });
    }
    
    function animatePathDrawing(ctx, x0, y0, x1, y1, x2, y2, duration, color) {
        var start = null;
        var step = function animatePathDrawingStep(timestamp) {
            if (start === null)
                start = timestamp;
            
            var delta = timestamp - start,
                progress = Math.min(delta / duration, 1);       
            
            // Draw curve
            drawBezierSplit(ctx, x0, y0, x1, y1, x2, y2, 0, progress, color);
            
            if (progress < 1) {
                window.requestAnimationFrame(step);
            }
        };
        
        window.requestAnimationFrame(step);
    }
        
    /**
     * Draws a splitted bezier-curve
     * 
     * @param ctx       The canvas context to draw to
     * @param x0        The x-coord of the start point
     * @param y0        The y-coord of the start point
     * @param x1        The x-coord of the control point
     * @param y1        The y-coord of the control point
     * @param x2        The x-coord of the end point
     * @param y2        The y-coord of the end point
     * @param t0        The start ratio of the splitted bezier from 0.0 to 1.0
     * @param t1        The start ratio of the splitted bezier from 0.0 to 1.0
     */
    function drawBezierSplit(ctx, x0, y0, x1, y1, x2, y2, t0, t1, color) {
        ctx.beginPath();    
        if( 0.0 == t0 && t1 == 1.0 ) {
            ctx.moveTo( x0, y0 );
            ctx.quadraticCurveTo( x1, y1, x2, y2 );
        } else if( t0 != t1 ) {
            var t00 = t0 * t0,
                t01 = 1.0 - t0,
                t02 = t01 * t01,
                t03 = 2.0 * t0 * t01;
            
            var nx0 = t02 * x0 + t03 * x1 + t00 * x2,
                ny0 = t02 * y0 + t03 * y1 + t00 * y2;
            
            t00 = t1 * t1;
            t01 = 1.0 - t1;
            t02 = t01 * t01;
            t03 = 2.0 * t1 * t01;
            
            var nx2 = t02 * x0 + t03 * x1 + t00 * x2,
                ny2 = t02 * y0 + t03 * y1 + t00 * y2;
            
            var nx1 = lerp ( lerp ( x0 , x1 , t0 ) , lerp ( x1 , x2 , t0 ) , t1 ),
                ny1 = lerp ( lerp ( y0 , y1 , t0 ) , lerp ( y1 , y2 , t0 ) , t1 );
            
            ctx.moveTo( nx0, ny0 );
            ctx.quadraticCurveTo( nx1, ny1, nx2, ny2 );
        }
        ctx.strokeStyle = color;
        ctx.lineWidth = 2;
        ctx.stroke();
        ctx.closePath();
    }
    
    /**Linearly interpolate between two numbers v0, v1 by t**/
    function lerp(v0, v1, t) {
        return ( 1.0 - t ) * v0 + t * v1;
    }
    
    function driveTracker(isFull, club) {
        $.get( 'dashboard/mostrecentround', isFull, function(data) {
            var driveStats = [];
            data.mostRecentRound[0].holes.forEach(function(hole){
                var holeScore = {},
                    allClub = club;
                if(club === "All"){
                    allClub = hole.teeShot.teeShotClub;
                }
                if(allClub === hole.teeShot.teeShotClub){
                    if(hole.score - hole.par === 0){
                        holeScore = {
                            scoreName: 'Par',
                            scoreColor: 'blue',
                            sortVal: 4
                        }
                    } else if(hole.score - hole.par === 1){
                        holeScore = {
                            scoreName: 'Bogey',
                            scoreColor: 'red',
                            sortVal: 5
                        }
                    } else if(hole.score - hole.par === -1){
                        holeScore = {
                            scoreName: 'Birdie',
                            scoreColor: 'orange',
                            sortVal: 3
                        }
                    } else if(hole.score - hole.par === 2){
                        holeScore = {
                            scoreName: 'Double Bogey',
                            scoreColor: 'black',
                            sortVal: 6
                        }
                    } else if(hole.score - hole.par === -2){
                        nholeScore = {
                            scoreName: 'Eagle',
                            scoreColor: 'yellow',
                            sortVal: 2
                        }
                    } else if(hole.score - hole.par > 2){
                        holeScore = {
                            scoreName: 'Worse Than Double Bogey',
                            scoreColor: 'gray',
                            sortVal: 7
                        }
                    } else if(hole.score - hole.par < -2){
                        holeScore = {
                            scoreName: 'Better Than Eagle',
                            scoreColor: 'pink',
                            sortVal: 1
                        }
                    }
                    var holeStats = {
                        teeShotDirection: hole.teeShot.teeShotDirection,
                        teeShotResult: hole.teeShot.teeShotResult,
                        teeShotClub: hole.teeShot.teeShotClub,
                        holeScore: holeScore
                    }
                    if(hole.par != 3){
                        driveStats.push(holeStats);
                    }
                }
            });
            
            var docCanvas = document.getElementById('driveTracker');
            var ctx = docCanvas.getContext('2d');
            
            var arrowStartPosY = 435;
            var arrowStartPosX = 410;
            
            var scoresFound = [];
            for(let i = 0; i < driveStats.length; i++){
                //Populate Legend
                if(scoresFound.length === 0){
                    scoresFound.push(driveStats[i]);
                } else {
                    var found = false;
                    scoresFound.forEach(function(score){
                        if(score.holeScore.scoreName === driveStats[i].holeScore.scoreName){
                            found = true;
                        }
                    });
                    if(!found){
                        scoresFound.push(driveStats[i]);
                    }
                }
                var arrowEndPosYOrig = 0;
            	var arrowEndPosXOrig = 0;
            	var middlePosYOrig = 0;
            	var randx = 0;
            	var randy = 0;
            	if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Rough'){
            		arrowEndPosYOrig = 150;
            		arrowEndPosXOrig = 290;
            		middlePosYOrig = 150;
            		randx = Math.floor(Math.random() * 40);
            		randy = Math.floor(Math.random() * 40);
            	} else if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Bunker') {
            		arrowEndPosYOrig = 75;
            		arrowEndPosXOrig = 310;
            		middlePosYOrig = 75;
            		randx = Math.floor(Math.random() * 40);
            		randy = Math.floor(Math.random() * 65);
            	} else if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Fescue') {
            		arrowEndPosYOrig = 175;
            		arrowEndPosXOrig = 400;
            		middlePosYOrig = 175;
            		randx = Math.floor(Math.random() * 40);
            		randy = Math.floor(Math.random() * 30);
            	} else if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Woods') {
            		arrowEndPosYOrig = 50;
            		arrowEndPosXOrig = 450;
            		middlePosYOrig = 50;
            		randx = Math.floor(Math.random() * 25);
            		randy = Math.floor(Math.random() * 75);
            	} else if(driveStats[i].teeShotDirection === 'Right' && driveStats[i].teeShotResult === 'Lost Ball') {
            		arrowEndPosYOrig = 75;
            		arrowEndPosXOrig = 500;
            		middlePosYOrig = 75;
            		randx = Math.floor(Math.random() * 1);
            		randy = Math.floor(Math.random() * 1);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Rough') {
            		arrowEndPosYOrig = 118;
            		arrowEndPosXOrig = 135;
            		middlePosYOrig = 125;
            		randx = Math.floor(Math.random() * 30);
            		randy = Math.floor(Math.random() * 40);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Bunker') {
            		arrowEndPosYOrig = 100;
            		arrowEndPosXOrig = 50;
            		middlePosYOrig = 100;
            		randx = Math.floor(Math.random() * 75);
            		randy = Math.floor(Math.random() * 150);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Fescue') {
            		arrowEndPosYOrig = 142;
            		arrowEndPosXOrig = 25;
            		middlePosYOrig = 142;
            		randx = Math.floor(Math.random() * 50);
            		randy = Math.floor(Math.random() * 1);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Woods') {
            		arrowEndPosYOrig = 30;
            		arrowEndPosXOrig = 10;
            		middlePosYOrig = 30;
            		randx = Math.floor(Math.random() * 30);
            		randy = Math.floor(Math.random() * 50);
            	} else if(driveStats[i].teeShotDirection === 'Left' && driveStats[i].teeShotResult === 'Lost Ball') {
            		arrowEndPosYOrig = 75;
            		arrowEndPosXOrig = 0;
            		middlePosYOrig = 75;
            		randx = Math.floor(Math.random() * 1);
            		randy = Math.floor(Math.random() * 1);
            	} else if(driveStats[i].teeShotDirection === 'Long' && (driveStats[i].teeShotResult === 'Rough' || driveStats[i].teeShotResult === 'Fescue')) {
            		arrowEndPosYOrig = 25;
            		arrowEndPosXOrig = 245;
            		middlePosYOrig = 25;
            		randx = Math.floor(Math.random() * 40);
            		randy = Math.floor(Math.random() * 10);
            	} else if(driveStats[i].teeShotDirection === 'Fairway') {
            		arrowEndPosYOrig = 100;
            		arrowEndPosXOrig = 180;
            		middlePosYOrig = -100;
            		randx = Math.floor(Math.random() * 75);
            		randy = Math.floor(Math.random() * 75);
            	}
            	
            	var arrowEndPosY = arrowEndPosYOrig;
            	var arrowEndPosX = arrowEndPosXOrig;
            	var middlePosY = middlePosYOrig;			
            	
            	arrowEndPosY = arrowEndPosYOrig + randy;
            	middlePosY = middlePosYOrig + randy;
            	arrowEndPosX = arrowEndPosXOrig + randx;

                // Clear canvas
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                
                if(club === "All"){
                    animatePathDrawing(ctx, arrowStartPosX, arrowStartPosY, 450, middlePosY, arrowEndPosX, arrowEndPosY, 5000, driveStats[i].holeScore.scoreColor);
                }
                else if(club === driveStats[i].teeShotClub) {
                    animatePathDrawing(ctx, arrowStartPosX, arrowStartPosY, 450, middlePosY, arrowEndPosX, arrowEndPosY, 5000, driveStats[i].holeScore.scoreColor);
                }
            };
            var legendHtml = ''
            scoresFound.sort(function (a, b) {
                return a.holeScore.sortVal - b.holeScore.sortVal;
            });
            scoresFound.forEach(function(score){
                if(score.holeScore.scoreName === 'Double Bogey'){
                    score.holeScore.scoreName = 'Double'
                }
                legendHtml += "<div><span id=legend-circle style='background-color: " + score.holeScore.scoreColor + ";'> </span><span>" + score.holeScore.scoreName + "</span></div>"
            });
            $('#legend-values').html(legendHtml);
        });
    };
    
</script>   
    
<% include ../partials/footer %>